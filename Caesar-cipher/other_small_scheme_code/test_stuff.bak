(define L
  '( 0 0 0 0 0 0 0 0 0 0 0 0 0))
(define alpha
  '( (a 0) (b 0) (c 0) (d 0) (e 0) (f 0) (g 0) (h 0) (i 0) (j 0) (k 0) (l 0) (m 0)))

(define iterate-list
  (lambda (l x)
         (cond ((null? l) l)
           ((equal? (car(car l))x)
                (cons  (cons (car( car l)) (cons (+ (car (cdr( car l))) 1) '() )) (cdr l)))
               (else (cons (car l) ( iterate-list (cdr l) x)))
               )))
;(cons  (cons (car( car alpha)) (cons (+ (car (cdr( car alpha))) 1) '() )) (cdr alpha))
(define(vector-test-iterative X Vector)    
      (do ((i 0 (+ i 1))) (< i (vector-length Vector))
          (if (eqv? X (vector-ref Vector i))
              (= i (vector-length Vector))
              (cons (vector-ref Vector i) (ls '())))
          ls))